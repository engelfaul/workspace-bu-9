CREATE COMPUTE MODULE ApplyRequestTransformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		
		DECLARE refLocEnv			REFERENCE TO OutputLocalEnvironment;
		DECLARE refEnvVar			REFERENCE TO Environment.Variables;
		DECLARE refHeaderIn      	REFERENCE TO refEnvVar.Header;
		
		DECLARE refBodyIn			REFERENCE TO InputRoot.XMLNSC.mjsSolCerrarSesion;
		
		DECLARE refContextoSol		REFERENCE TO refBodyIn.contextoSolicitud;
		DECLARE refClienteNatural	REFERENCE TO refBodyIn.clienteNatural;
		--DECLARE	refSeguridadToken	REFERENCE TO refBodyIn.seguridadTokenTipo;
		
		DECLARE refOperCanal		REFERENCE TO refContextoSol.operacionCanal;
		DECLARE refConsumidor		REFERENCE TO refContextoSol.consumidor;
		
		DECLARE refAplicacion		REFERENCE TO refConsumidor.aplicacion;
		DECLARE refTerminal			REFERENCE TO refConsumidor.terminal;
		DECLARE refCanal 			REFERENCE TO refConsumidor.canal;	
		
        --Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut        	REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;

		--Crear Header de salida
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut     	REFERENCE TO refMsgOut.Header;
		
		 --Crear y referenciar contenedor Body de salida
        CREATE FIELD refMsgOut.Body;
        DECLARE refBodyOut       	REFERENCE TO refMsgOut.Body; 
        
        --Declaración de variables
		DECLARE txOperacion			CHARACTER VACIO;
		DECLARE nomOperacion		CHARACTER FIELDNAME(refBodyIn);		
		
		--Homologar el codigo del servicio.
		--SET txOperacion 	= getBusReg_HomologServCR(nomOperacion);		

		 --Garantizar que se envía un messageId
        IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN 
            SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId; 
        ELSE 
            SET refHeaderOut.messageId = refHeaderIn.messageId; 
        END IF;
        
		--Aplicar los mapeos según especificación
		
		CREATE FIELD refBodyOut.TACSN_REQ;
		DECLARE refDataOut 			REFERENCE TO refBodyOut.TACSN_REQ;
		CREATE FIELD refDataOut.Header;
		DECLARE refDataOutHeader 			REFERENCE TO refDataOut.Header;
		
		DECLARE WHITE_SPACE						CONSTANT CHARACTER ' ';
		
		DECLARE pattern CHARACTER 'MM-dd-yyyy';
		
		DECLARE fecoperacion DATE ;
		
		SET fecoperacion = CAST(CURRENT_TIMESTAMP AS TIMESTAMP FORMAT 'I');
		
		--SET refDataOutDataHeader.i_idServicio				= txOperacion;
		
		SET refDataOutHeader.idServicio				= doRPadCharEst(getBusReg_HomologServPA(nomOperacion), 10, WHITE_SPACE);
		SET refDataOutHeader.version				= doRPadCharEst('1.0.0',15, WHITE_SPACE);
		SET refDataOutHeader.idTransaccion			= doRPadCharEst(FIELDVALUE(refOperCanal.idTransaccion),10, WHITE_SPACE);
		SET refDataOutHeader.fechaOperacion 		= doRPadCharEst(CAST (fecoperacion AS CHARACTER FORMAT pattern), 10, WHITE_SPACE);
		SET refDataOutHeader.pais					= I_PAIS;
		SET refDataOutHeader.lenguaje				= doRPadCharEst(FIELDVALUE(refOperCanal.codIdioma), 2, WHITE_SPACE);
		SET refDataOutHeader.canal					= doRPadCharEst(FIELDVALUE(refCanal.idCanal), 2, WHITE_SPACE);--I_CANAL, 2, WHITE_SPACE);  
		SET refDataOutHeader.ipCliente				= doRPadCharEst(FIELDVALUE(refTerminal.valOrigenPeticion), 15, WHITE_SPACE);
		SET refDataOutHeader.idApp					= doRPadCharEst(FIELDVALUE(refAplicacion.idAplicacion), 20, WHITE_SPACE);
		SET refDataOutHeader.usuario				= doRPadCharEst(FIELDVALUE(refClienteNatural.valNumeroIdentificacion),10 ,WHITE_SPACE);--I_USUARIO, 10, WHITE_SPACE);
		SET refDataOutHeader.idSesion				= doRPadCharEst(FIELDVALUE(refOperCanal.idSesion), 200 , WHITE_SPACE);
		--DATA
		CREATE FIELD refDataOut.Body;
		DECLARE refDataOutBody 		REFERENCE TO refDataOut.Body;
		
		SET refDataOutBody.Master					= doRPadCharEst(WHITE_SPACE, 25, WHITE_SPACE);
		--Transportar el header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn; 
		
		-- sorteo de cola en el cual el adaptador me retorna la respuesta correspondiente
		SET refHeaderOut.internalRoutingData.replyToQueue.queueName = UDPreplyToQ;
		
		-- Setear la cola de salida para request
		CALL SetDestinationList(UDPReqQ, VACIO, refLocEnv);
		
		--Se elimina el árbol del mensaje de entrada almacenado en el Environment
		DELETE FIELD refEnvVar.Header;
				
		RETURN TRUE;
	END;
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;