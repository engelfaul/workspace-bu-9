CREATE COMPUTE MODULE ApplyResponseTransformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Mantener el CorrelId
		CALL CopyMessageHeaders();
		
		--Referencia al Header y Body del envolvente
		DECLARE refMsgIn	 	 REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn 	 REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn   	 REFERENCE TO refMsgIn.Body;
		DECLARE refRespIn		 REFERENCE TO refBodyIn.TNITO_RESP;
		DECLARE refDataHeaderIn	 REFERENCE TO refRespIn.Header;
		DECLARE refDataIn		 REFERENCE TO refRespIn.Body;
		
		--Crear campo y referencia a los Registros
		CREATE FIELD refDataIn.Registros;	
		DECLARE refRegistrosIn REFERENCE TO refDataIn.Registros;
			
		--Referencia al OutputLocalEnvironment
		DECLARE refLocEnv 		 REFERENCE TO OutputLocalEnvironment;
												
		--Referencia al Environment
		CREATE FIELD Environment.Variables;
		DECLARE refEnvVar 		 REFERENCE TO Environment.Variables;
		
		--Declaración de variables
		DECLARE nameSpaceResp			CHARACTER FIELDVALUE(refEnvVar.NameSpace);
		
		--Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut		 REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
						
		--Crear campo y referencia Header de salida.
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut	 REFERENCE TO refMsgOut.Header;
		
		--Crear campo y referencia Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut		REFERENCE TO refMsgOut.Body;	
		
		--Declaración y referencias campos de la carga útil de salida
		CREATE FIELD refBodyOut.{nameSpaceResp}:NitOrigenResponse;
		DECLARE refFirstTagOut		REFERENCE TO refBodyOut.{nameSpaceResp}:NitOrigenResponse;
		
		--Declarar prefijo de la carga útil
		SET refFirstTagOut.(XMLNSC.NamespaceDecl)xmlns:nit = nameSpaceResp;
		
		--Crear campo y referencai al return de salida
		CREATE FIELD refFirstTagOut.Response;	
		DECLARE refReturnOut REFERENCE TO refFirstTagOut.Response;
		
		--Crear campo y referencia al DataHeader de salida
		CREATE FIELD refReturnOut.DataHeader;	
		DECLARE refDataHeaderOut REFERENCE TO refReturnOut.DataHeader;
		
		--Crear campo y referencai al Data de salida
		CREATE FIELD refReturnOut.Data;	
		DECLARE refDataOut REFERENCE TO refReturnOut.Data;
								
		--Transportar el Header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
				
		--Mapeo de la metadata en escenario exitoso
		SET refHeaderOut.responseData.status.statusCode = SUCCESS;
		
		--Mapeos de salida
		
		SET refDataHeaderOut.nombreOperacion       = refEnvVar.nombreOperacion;
		SET refDataHeaderOut.total                 = refEnvVar.total;
		SET refDataHeaderOut.caracterAceptacion    = 'B';
		SET refDataHeaderOut.ultimoMensaje		   = CAST (refDataHeaderIn.flagFinBloque AS INTEGER);
		SET refDataHeaderOut.codMsgRespuesta       = CAST (refDataHeaderIn.codigoError AS INTEGER);
		
	
		-- Mapea el campo archivoContinuacion
		SET refDataOut.archivoContinuacion              = refDataIn.llaveForward;		
		SET refDataOut.cantidadDeRegistrosAContinuacion	= CAST(FIELDVALUE(refDataIn.numeroRegistros) AS INTEGER);
		
		
		DECLARE i_cont INTEGER 1;
		--Mapeos
		FOR regRespInRep AS refDataIn.Registros.Registro[] DO

			DECLARE valorStr CHARACTER;
			SET valorStr = TRIM(CAST(FIELDVALUE(regRespInRep.monto) AS CHARACTER));
			
			DECLARE saldo CHARACTER;
			SET saldo = TRIM(CAST(FIELDVALUE(regRespInRep.saldo) AS CHARACTER));
			

			SET refDataOut.RegistrosRepetitivos[i_cont].talonRegistro              = CAST(FIELDVALUE(regRespInRep.numeroAprobacion) AS INTEGER);
			
			DECLARE Naturaleza CHARACTER; 
		
			
			IF regRespInRep.naturaleza = '5' THEN
				SET Naturaleza = 'NC';
			ELSEIF regRespInRep.naturaleza = '0' THEN
				SET Naturaleza = 'ND'; 
			
			END IF;
				 
			SET refDataOut.RegistrosRepetitivos[i_cont].tipoDeMovimientoRegistro   = Naturaleza;
			SET refDataOut.RegistrosRepetitivos[i_cont].referencia1                = TRIM(CAST(FIELDVALUE(regRespInRep.descripcion) AS CHARACTER));
			SET refDataOut.RegistrosRepetitivos[i_cont].referencia2	               = TRIM(CAST(FIELDVALUE(regRespInRep.numeroDocumento) AS CHARACTER));
			SET refDataOut.RegistrosRepetitivos[i_cont].valorTotal                 = FormatearNumeroDosDecimales(valorStr);
		
			DECLARE FechaMovimiento DATE  ; 
			DECLARE pattern CHARACTER 'MM-dd-yyyy';
			
			SET FechaMovimiento =  CAST (regRespInRep.fechaMovimiento AS DATE FORMAT pattern);
			
			SET refDataOut.RegistrosRepetitivos[i_cont].fechaMovimiento            = CAST (FechaMovimiento AS CHARACTER FORMAT 'yyyyMMdd');
			SET refDataOut.RegistrosRepetitivos[i_cont].codMoneda                  = refRegistrosIn.Registro.moneda;
			SET refDataOut.RegistrosRepetitivos[i_cont].saldoAnterior              = FormatearNumeroDosDecimales(saldo);
			SET i_cont = i_cont + 1;
		END FOR;
		--Setear la cola de salida            
        CALL SetDestinationListHd(refHeaderIn,refLocEnv);
					
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;