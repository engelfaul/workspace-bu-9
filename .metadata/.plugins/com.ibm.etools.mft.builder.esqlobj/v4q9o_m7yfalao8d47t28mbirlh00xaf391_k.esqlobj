/*EATE FUNCTION Main() RETURNS BOOLE*/
	BEGIN
		-- mantener el CorrelId
		CALL CopyMessageHeaders();
		
		DECLARE refLocEnv	REFERENCE TO OutputLocalEnvironment;
		DECLARE refEnvVar	REFERENCE TO Environment.Variables;
		DECLARE refHeaderIn	REFERENCE TO refEnvVar.Header;

		DECLARE refBodyIn		REFERENCE TO InputRoot.XMLNSC.ConsultaClientesPorUsuario; 
		DECLARE refDataHeaderIn REFERENCE TO refBodyIn.Request.DataHeader;
		DECLARE refDataIn 		REFERENCE TO refBodyIn.Request.Data;
		
		-- Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut	REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		-- Crear Header de salida
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut		REFERENCE TO refMsgOut.Header;
		
		-- Transportar el header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
		
		-- Crear y referenciar contenedor Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut	REFERENCE TO refMsgOut.Body;
		
		-- Declaración de variables
		DECLARE numTransaccion CHARACTER '';
		DECLARE nomTransaccion CHARACTER FIELDNAME(refBodyIn);
		
		-- Garantizar que se envía un messageId
		IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN
			SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId;
		ELSE
			SET refHeaderOut.messageId = refHeaderIn.messageId;
		END IF;
		
		
		CREATE FIELD refBodyOut.TCCPU_REQ;
		DECLARE refReqOut	REFERENCE TO refBodyOut.TCCPU_REQ;
		
		CREATE FIELD refReqOut.Header;
		DECLARE headerOut		REFERENCE TO refReqOut.Header;

		CREATE FIELD refReqOut.Body;
		DECLARE bodyOut REFERENCE TO refReqOut.Body;

		DECLARE ESPACIO	CONSTANT CHARACTER ' ';

		-- Mapeo de servicio
		SET headerOut.SERVICIO				= doRPadCharEst(getBusReg_HomologServPA(nomTransaccion), 20, ESPACIO);
		SET headerOut.IDTRX					= doRPadCharEst(refDataHeaderIn.idTransaccion, 36, ESPACIO);
		SET headerOut.IDSESION 				= doRPadCharEst(refDataIn.idSesion, 36, ESPACIO);
		SET headerOut.FECHASIS		 		= doRPadCharEst(CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'MM-dd-yyyy'), 30, ESPACIO);
		SET headerOut.CANAL					= doRPadCharEst(refDataHeaderIn.canal, 2, ESPACIO);
		SET headerOut.PAIS					= doRPadCharEst(I_PAIS, 2, ESPACIO);
		
		SET headerOut.version				= doRPadCharEst(I_VERSIONSERVICIO, 15, ESPACIO);
		SET headerOut.lenguaje				= doRPadCharEst(refDataIn.codIdioma, 2, ESPACIO);
		SET headerOut.ipCliente				= doRPadCharEst(refDataIn.valOrigenPeticion, 15, ESPACIO);
		SET headerOut.idApp					= doRPadCharEst(refDataIn.valVersionApp, 20, ESPACIO);
		SET headerOut.usuario				= doRPadCharEst(refDataHeaderIn.usuario, 10, ESPACIO);		
		
		
		
		SET bodyOut.username                = doRPadCharEst(refDataIn.valNumeroIdentificacion, 4096, ESPACIO);
		SET bodyOut.passwordAnterior		= doRPadCharEst(refDataIn.valClaveCanalVirtualAnterior, 4096, ESPACIO);
		SET bodyOut.passwordNuevo			= doRPadCharEst(refDataIn.valClaveCanalVirtualNueva, 4096, ESPACIO);
		SET bodyOut.clientType				= doRPadCharEst('P', 1, ESPACIO);
		SET bodyOut.master					= doRPadCharEst(' ', 25, ESPACIO);

		-- sorteo de cola en el cual el adaptador me retorna la respuesta correspondiente
		SET refHeaderOut.internalRoutingData.replyToQueue.queueName = UDPreplyToQ;
		
		-- Setear la cola de salida para request
		CALL SetDestinationList(UDPReqQ, VACIO, refLocEnv);
		
		-- Se elimina el arbol del mensaje de entrada almacenado en el environment
		DELETE FIELD refEnvVar.Header;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
