CREATE COMPUTE MODULE ApplyRequestTransformation_GOTP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Mantener el CorrelId   
		CALL CopyMessageHeaders();
		
		DECLARE refLocEnv			REFERENCE TO OutputLocalEnvironment;
		DECLARE refEnvVar			REFERENCE TO Environment.Variables;
		DECLARE refHeaderIn      	REFERENCE TO refEnvVar.Header;
		
		DECLARE refBodyIn			REFERENCE TO InputRoot.XMLNSC.msjSolOpGenerarOTP;
		
		DECLARE refContextoSol		REFERENCE TO refBodyIn.contextoSolicitud;
		DECLARE refClienteNatural	REFERENCE TO refBodyIn.clienteNatural;
		DECLARE refSegTokenTipo		REFERENCE TO refBodyIn.seguridadTokenTipo;
		
		DECLARE refOperCanal		REFERENCE TO refContextoSol.operacionCanal;
		DECLARE refConsumidor		REFERENCE TO refContextoSol.consumidor;
		
		
		DECLARE refAplicacion		REFERENCE TO refConsumidor.aplicacion;
		DECLARE refTerminal			REFERENCE TO refConsumidor.terminal;	
		DECLARE refCanal			REFERENCE TO refConsumidor.canal;
		
        --Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut        	REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;

		--Crear Header de salida
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut     	REFERENCE TO refMsgOut.Header;
		
		 --Crear y referenciar contenedor Body de salida
        CREATE FIELD refMsgOut.Body;
        DECLARE refBodyOut       	REFERENCE TO refMsgOut.Body; 
        
        --Declaración de variables
		DECLARE txOperacion			CHARACTER VACIO;
		DECLARE nomOperacion		CHARACTER FIELDNAME(refBodyIn);
					

		 --Garantizar que se envía un messageId
        IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN 
            SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId; 
        ELSE 
            SET refHeaderOut.messageId = refHeaderIn.messageId; 
        END IF;
        
		--Aplicar los mapeos según especificación
		
		CREATE FIELD refBodyOut.TGOTP_REQ;
		DECLARE refReqOut 			REFERENCE TO refBodyOut.TGOTP_REQ;
		
		CREATE FIELD refReqOut.Header;
		DECLARE refDataHeaderOut 	REFERENCE TO  refReqOut.Header;
		
		CREATE FIELD refReqOut.Body;
		DECLARE refDataOut      REFERENCE TO refReqOut.Body;
		
		DECLARE WHITE_SPACE CONSTANT CHARACTER ' ';
		DECLARE ZERO_STRING CONSTANT CHARACTER '0';
				
		SET refDataHeaderOut.idServicio				= 'MOBGETOKEN';
		SET refDataHeaderOut.version				= doRPadCharEst(I_VERSIONSERVICIO, 15, WHITE_SPACE);
		SET refDataHeaderOut.idTransaccion			= doRPadCharEst(refOperCanal.idTransaccion, 10, WHITE_SPACE);
		SET refDataHeaderOut.fechaOperacion			= doRPadCharEst(CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'MM-dd-yyyy'), 10, WHITE_SPACE);
		SET refDataHeaderOut.pais					= doRPadCharEst(I_PAIS, 2, WHITE_SPACE);
		SET refDataHeaderOut.lenguaje				= doRPadCharEst(refOperCanal.codIdioma, 2, WHITE_SPACE);
		SET refDataHeaderOut.canal					= doRPadCharEst(refCanal.idCanal, 2, WHITE_SPACE);
		SET refDataHeaderOut.ipCliente				= doRPadCharEst(refTerminal.valOrigenPeticion, 15, WHITE_SPACE);
		SET refDataHeaderOut.idApp					= doRPadCharEst(refAplicacion.idAplicacion, 20, WHITE_SPACE);
		SET refDataHeaderOut.usuario				= doRPadCharEst(refTerminal.codUsuario, 10, WHITE_SPACE);
		SET refDataHeaderOut.idSesion				= doRPadCharEst(refOperCanal.idSesion, 200, WHITE_SPACE);

		SET refDataOut.master						= doRPadCharEst(' ', 25, WHITE_SPACE);
	
		
		--Transportar el header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn; 
		
		-- sorteo de cola en el cual el adaptador me retorna la respuesta correspondiente
		SET refHeaderOut.internalRoutingData.replyToQueue.queueName = UDPreplyToQ;
		
		-- Setear la cola de salida para request
		CALL SetDestinationList(UDPReqQ, VACIO, refLocEnv);
		
		-- Se elimina el arbol del mensaje de entrada almacenado en el environment
		DELETE FIELD refEnvVar.Header;
				
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;