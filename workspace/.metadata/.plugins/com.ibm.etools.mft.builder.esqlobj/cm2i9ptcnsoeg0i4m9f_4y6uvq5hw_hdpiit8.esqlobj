CREATE COMPUTE MODULE ProcessRequestData
	-- referencias al mensaje de entrada
	DECLARE InputMessage REFERENCE TO InputRoot.XMLNSC;
	DECLARE InputHeader REFERENCE TO InputMessage.esbXML:esbXML.Header;
	DECLARE InputBody REFERENCE TO InputMessage.esbXML:esbXML.Body;
	-- constante que identifica el tag Parameter
	DECLARE PARAMETERCONS CONSTANT CHARACTER 'Parameter';
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- mantener CorrelationId
		CALL CopyMessageHeaders();
		--- construcción mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.TransactionRequest;
		DECLARE txrequest REFERENCE TO OutputRoot.XMLNSC.TransactionRequest;
		
		SET Environment.Variables.MsgRequest.Header = InputHeader;
		SET Environment.Variables.MsgRequest.Transaction = FIELDNAME(InputBody.*[1]);
	
		/* Obtener los valores de mensajes de entrada y de caché */
		DECLARE refConfig REFERENCE TO Environment.Variables.ConfigXML;
		DECLARE refInputMessage REFERENCE TO  InputBody;
		
		/*Mapear los parametros del archivo de configuracion con el valor que trae cada parametro*/
		DECLARE fdTransaction ROW;
		
		/* Buscar la transacción en el XML de configuración y cargar arreglo con la informacion del 
		 * Procedimiento almacenado 
		 */
		SET  fdTransaction.Transaction[] = 
				(
					SELECT *
					FROM refConfig.Transaction[] as S 
					WHERE 
						S.Name = Environment.Variables.MsgRequest.Header.requestData.endpointReference.serviceId
				);
		
		/*Cargar el mensaje de salida con el nombre del procedimiento, sus parametros y valores */
		IF fdTransaction.Transaction.Code IS NOT NULL THEN
			
			DECLARE connref REFERENCE TO refConfig.ConnectionDetail;
			SET txrequest.ConnectionDetails = connref;
			-- nombre programa RPG a ejecutar
			SET txrequest.ConnectionDetails.ProgramName = fdTransaction.Transaction[1].ProgramName;
			-- datos adicionales de conexión para stored procedure
			SET txrequest.ConnectionDetails.OperationLibrary = fdTransaction.Transaction[1].OperationLibrary;
			SET txrequest.ConnectionDetails.OperationName = fdTransaction.Transaction[1].OperationName;
			
			DECLARE txref REFERENCE TO fdTransaction.Transaction[1];
			
			DECLARE txrefParameters ROW;
			DECLARE txrefRequest ROW;
			SET  txrefRequest.ConnectionDetails = txrequest.ConnectionDetails;
			
			-- referenciar el arbol de parametros de entrada
			
			DECLARE existsInputParams BOOLEAN TRUE;
			DECLARE i_cont 	   INTEGER 1;
			DECLARE i_cont_str CHARACTER '';
			
			WHILE existsInputParams DO
				SET i_cont_str = CAST(i_cont AS CHARACTER);
				DECLARE nameIn		 CHARACTER 'InputParameters' ||	i_cont_str;
				DECLARE inputparam 	 REFERENCE TO txref.{nameIn};
				MOVE inputparam FIRSTCHILD;
				DECLARE existsInput 	 BOOLEAN SINGULAR(fdTransaction.Transaction[1].{nameIn}[]);				
				-- obtener los valores de los parametros de entrada
				IF existsInput THEN
					WHILE LASTMOVE(inputparam) DO
						SET inputparam.value = COALESCE(refInputMessage.*.Header.{inputparam.name},
											   refInputMessage.*.Body.{inputparam.name});
						MOVE inputparam NEXTSIBLING;
					END WHILE;
				ELSE
					SET existsInputParams = FALSE;
				END IF;		
				SET i_cont = i_cont + 1;
			END WHILE;
			
			SET  txrefParameters = txref;
			DELETE FIELD txrefParameters.Code;
			DELETE FIELD txrefParameters.Name;
			DELETE FIELD txrefParameters.ProgramName;
			
			SET txrefParameters.ConnectionDetails = txrefRequest.ConnectionDetails;
			
			SET txrequest  		=  txrefParameters;

			-- adicionar la cardinalidad de los requerimientos
			DECLARE inputCardinality REFERENCE TO fdTransaction.Transaction[1].inputCardinality;
			IF LASTMOVE(inputCardinality) THEN
				SET txrequest.inputCardinality = fdTransaction.Transaction[1].inputCardinality;
			END IF;
			DECLARE outputCardinality REFERENCE TO fdTransaction.Transaction[1].outputCardinality;
			IF LASTMOVE(outputCardinality) THEN
				SET txrequest.outputCardinality = fdTransaction.Transaction[1].outputCardinality;
			END IF;
			DECLARE responseIndex REFERENCE TO fdTransaction.Transaction[1].responseIndex;
			IF LASTMOVE(responseIndex) THEN
				SET txrequest.responseIndex = fdTransaction.Transaction[1].responseIndex;
			END IF;
			DECLARE validationTagIndex REFERENCE TO fdTransaction.Transaction[1].validationTagIndex;
			IF LASTMOVE(validationTagIndex) THEN
				SET txrequest.validationTagIndex = fdTransaction.Transaction[1].validationTagIndex;
			END IF;
			DECLARE validationValue REFERENCE TO fdTransaction.Transaction[1].validationValue;
			IF LASTMOVE(validationValue) THEN
				SET txrequest.validationValue = fdTransaction.Transaction[1].validationValue;
			END IF;
			--20160511 - Enviar en el mensaje el messageId para traza.
			SET txrequest.messageId = InputHeader.messageId;			
			
		END IF;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;