CREATE COMPUTE MODULE ApplyBusinessErrorTransformation_APAN
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Mantener el CorrelId
		CALL CopyMessageHeaders();
		
		--Referencia al Header y Body del mensaje entrante
		DECLARE refMsgIn			REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn     	REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn			REFERENCE TO refMsgIn.Body;
		DECLARE refRespIn			REFERENCE TO refBodyIn.TAPAN_RESP.Header;
		
		--Referencia al OutputLocalEnvironment
		DECLARE refLocEnv		REFERENCE TO OutputLocalEnvironment;
					
		--Referencia al Environment
		DECLARE refEnvVar REFERENCE TO Environment.Variables;
		
		--Declaración de variables
		DECLARE nameSpaceResp			CHARACTER FIELDVALUE(refEnvVar.NameSpace);
		
		--Crear mensaje de salida
        CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
        DECLARE refMsgOut           REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;

        --Crear Header de salida
        CREATE FIELD refMsgOut.Header;
        DECLARE refHeaderOut        REFERENCE TO refMsgOut.Header;
        
        --Declaración de variables
		DECLARE codMsjRespuesta		CHARACTER TRIM(FIELDVALUE(refRespIn.ERROR));
		DECLARE valMsjRespuesta	    CHARACTER TRIM(FIELDVALUE(refRespIn.MENSAJER));
		
		--Transportar el Header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
		
		 --Garantizar que se envía un messageId
        IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN
            SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId; 
        ELSE 
            SET refHeaderOut.messageId = refHeaderIn.messageId; 
       END IF;
        
        --Declaración referencia al statusReference de la metadata
		CREATE FIELD refHeaderOut.responseData.status;
		DECLARE statusReference	REFERENCE TO refHeaderOut.responseData.status;		
		
		--Mapeo del error para el HandleError
		SET statusReference.statusCode							= BUSINESS_EXCEPTION; 
		SET statusReference.businessException.businessCode		= codMsjRespuesta;				
		SET statusReference.businessException.businessMessage	= valMsjRespuesta;
		
		--Propagar mensaje al HandleError
		PROPAGATE TO TERMINAL 'out1' MESSAGE OutputRoot DELETE NONE;
		
		--Crear campo y referencia Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut		REFERENCE TO refMsgOut.Body;	
		
        -- crear response
		CREATE FIELD refBodyOut.{nameSpaceResp}:ActualizacionParametrosNotificacionesResponse;
		DECLARE refFirstTagOut	REFERENCE TO refBodyOut.{nameSpaceResp}:ActualizacionParametrosNotificacionesResponse;
		
		-- Declarar prefijo de la carga útil
		SET refFirstTagOut.(XMLNSC.NamespaceDecl)xmlns:cam = nameSpaceResp;
		
		CREATE LASTCHILD OF refFirstTagOut NAME 'Response';
		MOVE refFirstTagOut LASTCHILD;
		
		-- Crear los tag contenedores de respuesta
        CREATE FIELD refFirstTagOut.DataHeader;
        DECLARE refDataHeaderOut 									REFERENCE TO refFirstTagOut.DataHeader;
        
		
		--Mapeos de salida
		SET refDataHeaderOut.nombreOperacion	   = TRIM(CAST(FIELDVALUE(refEnvVar.nombreOperacion) AS CHARACTER));
		SET refDataHeaderOut.total		  		   = TRIM(FIELDVALUE(refEnvVar.total));
		SET refDataHeaderOut.caracterAceptacion    = 'M';
		SET refDataHeaderOut.ultimoMensaje		   = '1';
		SET refDataHeaderOut.idTransaccion         = TRIM(CAST(FIELDVALUE(refEnvVar.idTransaccion) AS CHARACTER));	
		SET refDataHeaderOut.codMsgRespuesta   	   = codMsjRespuesta;
		SET refDataHeaderOut.msgRespuesta   	   = valMsjRespuesta;
		
		--Setear la cola de salida
		CALL SetDestinationListHd(refHeaderOut, refLocEnv);
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;