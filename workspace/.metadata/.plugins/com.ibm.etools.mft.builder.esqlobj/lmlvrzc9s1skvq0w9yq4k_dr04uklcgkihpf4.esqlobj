CREATE COMPUTE MODULE LogFlow_ChannelMessageLogHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Copiar cabeceras del mensaje
		CALL CopyMessageHeaders();
		
		--Declaracion mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.Log;
		DECLARE msglog REFERENCE TO OutputRoot.XMLNSC.Log;
		DECLARE stream BLOB;
		---- Transformacines y operaciones ----		
		IF InputRoot.XMLNSC.LogHandlerMsgSet.timestamp IS NULL OR InputRoot.XMLNSC.LogHandlerMsgSet.timestamp = '' THEN
				SET msglog.timestamp = 'N/A';
			ELSE 
				SET msglog.timestamp		= InputRoot.XMLNSC.LogHandlerMsgSet.timestamp;
		END IF;

		/**20160414 Se adiciona en el mensaje em messageId
		Precondicion: debe llevar el campo messageId**/					

		IF InputRoot.XMLNSC.LogHandlerMsgSet.messageId IS NULL OR InputRoot.XMLNSC.LogHandlerMsgSet.messageId = '' THEN
				SET msglog.messageId = 'N/A';	
		ELSE
			SET msglog.messageId	=  InputRoot.XMLNSC.LogHandlerMsgSet.messageId;			
		END IF;		
		
		IF InputRoot.XMLNSC.LogHandlerMsgSet.message IS NULL OR InputRoot.XMLNSC.LogHandlerMsgSet.message = '' THEN
				SET msglog.message = 'N/A';	
		ELSE
			SET stream = InputRoot.XMLNSC.LogHandlerMsgSet.message;
			SET msglog.message	= CAST(stream AS CHARACTER CCSID InputRoot.MQMD.CodedCharSetId);			
		END IF;

		BEGIN ATOMIC
			SET records_cont = records_cont + 1;
			
			IF records_cont > records OR CONTAINS(filename, 'init.log')THEN
				DECLARE valTimeStamp	TIMESTAMP CAST(REPLACE(InputRoot.XMLNSC.LogHandlerMsgSet.timestamp,'T',' ') AS TIMESTAMP FORMAT 'yyyy-MM-dd HH:mm:ss.SSSSSSZZZ');
				DECLARE timestampname 	CHARACTER CAST(valTimeStamp AS CHARACTER FORMAT 'yyyyMMddHHmmss');
				SET filename = InputRoot.XMLNSC.LogHandlerMsgSet.filename||timestampname||'.txt';
				SET records_cont = 1;			
			END IF;
		END;
		
		SET OutputLocalEnvironment.Destination.File.Name = filename;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;