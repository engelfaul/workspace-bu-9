CREATE COMPUTE MODULE ApplyMessageExceptionTransformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
	   --Mantener el CorrelId
		CALL CopyMessageHeaders();
		
		--Referencia al Header y Body del envolvente
		DECLARE refMsgIn	REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn	REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn	REFERENCE TO refMsgIn.Body;
		
 		--Referencia al OutputLocalEnvironment
 		DECLARE refLocEnv 	REFERENCE TO OutputLocalEnvironment;
		
		--Referencia al Environment
		DECLARE refEnvVar 	REFERENCE TO Environment.Variables;
		
		 --Declaración de variables
		DECLARE nameSpaceResp			CHARACTER FIELDVALUE(refEnvVar.NameSpace);
		
		--Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut 	REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		--Crear campo y referencia Header de salida.
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut REFERENCE TO refMsgOut.Header;
		
		--Crear campo y referencia Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut	 REFERENCE TO refMsgOut.Body;
		
		--Declaración y referencias campos de la carga útil de salida
        CREATE FIELD refBodyOut.{nameSpaceResp}:ConsultaSaldosClienteResponse;
		DECLARE refFirstTagOut		REFERENCE TO refBodyOut.{nameSpaceResp}:ConsultaSaldosClienteResponse;	
		
		
		--Declarar prefijo de la carga útil
		SET refFirstTagOut.(XMLNSC.NamespaceDecl)xmlns:con = nameSpaceResp;
		
		--Crear campo y referencia al response de salida
		CREATE FIELD refFirstTagOut.Response;	
		DECLARE refResponseOut 			REFERENCE TO refFirstTagOut.Response;
		
		--Crear campo y referencia al data header de salida
		CREATE FIELD refResponseOut.DataHeader;	
		DECLARE refDataHeaderOut		 REFERENCE TO refResponseOut.DataHeader;
		
		--Transportar el Header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
		
		--Construir el mensaje de salida para un error técnico
		CALL TechnicalErrorTransformationDataHeader(refBodyIn, refEnvVar, refResponseOut);
		
		
		
		 --Setear la cola de salida
        CALL SetDestinationListHd(refHeaderIn, refLocEnv);		
        
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;