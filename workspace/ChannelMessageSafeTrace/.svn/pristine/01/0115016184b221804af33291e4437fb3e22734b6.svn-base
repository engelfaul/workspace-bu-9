BROKER SCHEMA com.davivienda.commons.traceHandler
PATH com.davivienda.utils;
DECLARE tns NAMESPACE 'http://davivienda.com/envelope/esbxml';


DECLARE traceabilityPoint EXTERNAL CHARACTER '';
-- variable compartida para resolver el archivo de trazabilidad
DECLARE filename SHARED CHARACTER 'init.log';
-- varialbe UDP con la cantidad de registros máximos
DECLARE records EXTERNAL INTEGER 0;
-- variable compartida para llevar el contador de registros
DECLARE records_cont SHARED INTEGER 0;

CREATE COMPUTE MODULE BuildErrorMessage_ChannelMessageLogHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- mantener las cabeceras
		CALL CopyMessageHeaders();
		
		--Crear envoltura esbXml
		CREATE FIELD OutputRoot.XMLNSC.tns:esbXML;
		DECLARE msgOut REFERENCE TO OutputRoot.XMLNSC.tns:esbXML;
		
		--Crear contenedor Header de salida
		CREATE FIELD msgOut.Header;
		
		--Declarar referencias a campos de salida
		DECLARE headerOut REFERENCE TO msgOut.Header;
		
		--Declaración de los parámetros de entrada para la función de manejo del ExceptionList
		DECLARE messageText 	CHARACTER '';
		DECLARE parentName 		CHARACTER '';
		DECLARE catlgName 		CHARACTER '';
		DECLARE messageNumber 	INTEGER 0;
					 
		--Llamado a la función de detalles de excepción
   	    CALL getLastExceptionDetail(InputExceptionList, messageNumber, messageText, parentName, catlgName);
   	    
   	    -- Envio MessageId
   	    SET headerOut.messageId		= InputRoot.MQMD.CorrelId;
   	       	    
   	    --Reportar una excepción en la metaData de salida para del manejo de Excepciones
		SET headerOut.responseData.status.statusCode = 'SystemException';
   	    
   	    --Crear contenedor y referencia al systemException	
		CREATE FIELD 				  headerOut.responseData.status.systemException;
		DECLARE sysExcep REFERENCE TO headerOut.responseData.status.systemException;
		
		--Grabar detalles de la excepcion en la metadata
   	    SET sysExcep.faultcode   = '9000'; 
		SET sysExcep.faultstring = 'Error al generar mensaje de traza';
		SET sysExcep.faultactor  = 'LogHandler';
		SET sysExcep.detail		 = InputExceptionList;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE LogFlow_ChannelMessageLogHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Copiar cabeceras del mensaje
		CALL CopyMessageHeaders();
		
		--Declaracion mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.Log;
		DECLARE msglog REFERENCE TO OutputRoot.XMLNSC.Log;
		DECLARE stream BLOB;
		---- Transformacines y operaciones ----		
		IF InputRoot.XMLNSC.LogHandlerMsgSet.timestamp IS NULL OR InputRoot.XMLNSC.LogHandlerMsgSet.timestamp = '' THEN
				SET msglog.timestamp = 'N/A';
			ELSE 
				SET msglog.timestamp		= InputRoot.XMLNSC.LogHandlerMsgSet.timestamp;
		END IF;

		/**20160414 Se adiciona en el mensaje em messageId
		Precondicion: debe llevar el campo messageId**/					

		IF InputRoot.XMLNSC.LogHandlerMsgSet.messageId IS NULL OR InputRoot.XMLNSC.LogHandlerMsgSet.messageId = '' THEN
				SET msglog.messageId = 'N/A';	
		ELSE
			SET msglog.messageId	=  InputRoot.XMLNSC.LogHandlerMsgSet.messageId;			
		END IF;		
		
		IF InputRoot.XMLNSC.LogHandlerMsgSet.message IS NULL OR InputRoot.XMLNSC.LogHandlerMsgSet.message = '' THEN
				SET msglog.message = 'N/A';	
		ELSE
			SET stream = InputRoot.XMLNSC.LogHandlerMsgSet.message;
			SET msglog.message	= CAST(stream AS CHARACTER CCSID InputRoot.MQMD.CodedCharSetId);			
		END IF;

		SET records_cont = records_cont + 1;
		
		IF records_cont > records OR CONTAINS(filename, 'init.log')THEN			
			SET filename = InputRoot.XMLNSC.LogHandlerMsgSet.filename;
			SET records_cont = 1;			
		END IF;

		SET OutputLocalEnvironment.Destination.File.Name = InputRoot.XMLNSC.LogHandlerMsgSet.filename;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
