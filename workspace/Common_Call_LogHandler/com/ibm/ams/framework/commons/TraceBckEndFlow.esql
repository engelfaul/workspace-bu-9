BROKER SCHEMA com.ibm.ams.framework.commons
PATH com.davivienda.utils;

/*
 *
 * File name: TraceBckEndFlow.esql
 *
 * Purpose:   Esquema ESQL que define los modulos utilizados para el flujo de mensajes
 *				que se utiliza en trazabilidad.
 *
 * Authors:  IBM AMS TAC Colombia
 *                 
 * Date      28 de Enero de 2014
 * Version:  1.0
 * 
 *
 */


CREATE COMPUTE MODULE BuildTraceBckEndMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Copiar cabeceras del mensaje
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.Properties = InputRoot.Properties;
		
		DECLARE esbxmlin REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		-- referencia al header de entrada
		DECLARE headerin REFERENCE TO headerin;
		IF FIELDNAME (esbxmlin.Header) <> 'Header' THEN
			MOVE headerin TO esbxmlin.Header;
		END IF;		
		
		IF CAST(Environment.Variables.Traceable AS BOOLEAN) THEN
			-- construcción de mensaje de log
			CREATE FIELD OutputRoot.XMLNSC.LogHandlerMsgSet;
			
			SET OutputRoot.XMLNSC.LogHandlerMsgSet.systemId			= COALESCE(headerin.systemId,Environment.Variables.Canal,'');
			SET OutputRoot.XMLNSC.LogHandlerMsgSet.messageId		= COALESCE(headerin.messageId,Environment.Variables.messageId,InputRoot.MQMD.CorrelId);
			SET OutputRoot.XMLNSC.LogHandlerMsgSet.componentId 		= traceabilityPoint;
			SET OutputRoot.XMLNSC.LogHandlerMsgSet.timeStamp	 	= CURRENT_TIMESTAMP;
			SET OutputRoot.XMLNSC.LogHandlerMsgSet.serviceId	 	= COALESCE(Environment.Variables.ServiceId,headerin.requestData.endpointReference.serviceId,'');
		
			RETURN TRUE;
			
		END IF;
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

 /*
 *	Module name: BuildErrorMessage
 *	Purpose: Envia el error presentado en el flujo  
 *			al error handler.
 */
CREATE COMPUTE MODULE BuildErrorMessage_TraceBckEndFlow
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- mantener las cabeceras
		CALL CopyMessageHeaders();
		
		--Referencia al Header y Body del envolvente
		DECLARE msgIn	 REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE headerIn REFERENCE TO msgIn.Header;
		
		--Crear envoltura esbXml
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE msgOut REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		--Crear contenedor Header de salida
		CREATE FIELD msgOut.Header;
		
		--Declarar referencias a campos de salida
		DECLARE headerOut REFERENCE TO msgOut.Header;
		
		--Declaración de los parámetros de entrada para la función de manejo del ExceptionList
		DECLARE messageText 	CHARACTER '';
		DECLARE parentName 		CHARACTER '';
		DECLARE catlgName 		CHARACTER '';
		DECLARE messageNumber 	INTEGER 0;
				
		--Transportar el Header de la envoltura esbXML
		SET headerOut = headerIn;		
		
		--Garantizar que se envía un messageId
		IF headerIn.messageId IS NULL OR FIELDVALUE(headerIn.messageId) = '' THEN 
			SET headerOut.messageId = InputRoot.MQMD.CorrelId; 
		END IF;
					 
		--Llamado a la función de detalles de excepción
   	    CALL getLastExceptionDetail(InputExceptionList, messageNumber, messageText, parentName, catlgName);
   	    
   	    --Reportar una excepción en la metaData de salida para del manejo de Excepciones
		SET headerOut.responseData.status.statusCode = 'SystemException';
   	    
   	    --Crear contenedor y referencia al systemException	
		CREATE FIELD 				  headerOut.responseData.status.systemException;
		DECLARE sysExcep REFERENCE TO headerOut.responseData.status.systemException;
		
		--Grabar detalles de la excepcion en la metadata
   	    SET sysExcep.faultcode   = '9000'; 
		SET sysExcep.faultstring = 'Error al generar mensaje de traza';
		SET sysExcep.faultactor  = 'TraceBckEnd';
		SET sysExcep.detail		 = InputExceptionList;
				
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;
