BROKER SCHEMA com.davivienda.busregional.servicios
PATH com.davivienda.utils;

/*
* Module name: ProcessErrorMessageReq
* Purpose: Es el encargado de generar respuestas de
*          error
*/
CREATE COMPUTE MODULE ProcessErrorMessageReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- mantener el CorrelId
		CALL CopyMessageHeaders();
		
		-- Referencia al Header y Body del envolvente
		DECLARE refMsgIn		REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn 	REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn   	REFERENCE TO refMsgIn.Body;
		
		-- Referencia al OutputLocalEnvironment
		DECLARE refLocEnv		REFERENCE TO OutputLocalEnvironment;
		
		-- Referencia al Environment
		CREATE FIELD Environment.Variables;
		DECLARE refEnvVar 		REFERENCE TO Environment.Variables;
		
		-- Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut 		REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		-- Crear campo y referencia Header de salida
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut	REFERENCE TO refMsgOut.Header;		
		
		-- Declaración de los tres parámetros de entrada para la función de manejo del ExceptionList
		DECLARE nameSpaceResp	CHARACTER FIELDVALUE(refEnvVar.NameSpace);
		DECLARE messageText		CHARACTER VACIO;
		DECLARE parentName		CHARACTER VACIO;
		DECLARE catlgName		CHARACTER VACIO;
		DECLARE messageNumber	INTEGER ZERO_INT;
		
		-- Transportar el Header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
		
		-- Validación MessageID
		IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN
			SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId;
		ELSE
			SET refHeaderOut.messageId = refHeaderIn.messageId;
		END IF;
		
		-- Llamado a función que construye un systemException en el esbXML:Header
		CALL BuildHeaderSystemException(refHeaderOut, InputExceptionList, UDPReqQ);
		
		-- Propagar mensaje al HandleError
		PROPAGATE TO TERMINAL 'out1' MESSAGE OutputRoot DELETE NONE;
		
		-- Llamado a función que construye un systemException en el esbXML:Header
		CALL getLastExceptionDetail(InputExceptionList, messageNumber, messageText, parentName, catlgName);
		
		-- Crear campo y referencia Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut	REFERENCE TO refMsgOut.Body;
		
		-- Declaración y referencias campos de la carga útil de salida
		CREATE FIELD refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		DECLARE refRespOut	REFERENCE TO refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		
		-- Declarar prefijo de la carga útil
		SET refRespOut.(XMLNSC.NamespaceDecl)xmlns:con = nameSpaceResp;
		
		CREATE FIELD refRespOut.Response;
		DECLARE refRespConOut	REFERENCE TO refRespOut.Response;
		
		-- Llamado a la función que construye el mensaje de salida por Error Datos de Entrada (Error Tecnico)
		CALL ProcessErrorTransformationDataHeader(refBodyIn, refEnvVar, refRespConOut, messageNumber);

		-- Setear la cola de salida
		CALL SetDestinationListHd(refHeaderIn, refLocEnv); 
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

/*
*  Module name: ApplyRequestTransformation
*  Purpose: Transformar el mensaje request del canal al mensaje
*           request enviado al backend como requerimiento
*/
CREATE COMPUTE MODULE ApplyRequestTransformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- mantener el CorrelId
		CALL CopyMessageHeaders();
		
		DECLARE refLocEnv	REFERENCE TO OutputLocalEnvironment;
		DECLARE refEnvVar	REFERENCE TO Environment.Variables;
		DECLARE refHeaderIn	REFERENCE TO refEnvVar.Header;

		DECLARE refBodyIn		REFERENCE TO InputRoot.XMLNSC.ConsultaDatosCuenta; 
		DECLARE refRequestIn 	REFERENCE TO refBodyIn.Request;
		DECLARE refDataHeaderIn	REFERENCE TO refRequestIn.DataHeader;
		DECLARE refDataIn		REFERENCE TO refRequestIn.Data;
		
		-- Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut	REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		-- Crear Header de salida
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut		REFERENCE TO refMsgOut.Header;
		
		-- Transportar el header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
		
		-- Crear y referenciar contenedor Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut	REFERENCE TO refMsgOut.Body;
		
		-- Declaración de variables
		DECLARE numTransaccion CHARACTER '';
		DECLARE nomTransaccion CHARACTER refDataHeaderIn.nombreOperacion;
		
		-- Garantizar que se envía un messageId
		IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN
			SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId;
		ELSE
			SET refHeaderOut.messageId = refHeaderIn.messageId;
		END IF;
			
		
		CREATE FIELD refBodyOut.TCDCT_REQ;
		DECLARE refReqOut	REFERENCE TO refBodyOut.TCDCT_REQ;
		
		CREATE FIELD refReqOut.Header;
		DECLARE header		REFERENCE TO refReqOut.Header;
		
		CREATE FIELD refReqOut.Body;
		DECLARE bodyOut 	REFERENCE TO refReqOut.Body;
		
		
		-- Mapeo de servicio
		SET header.idServicio			= doRPadCharEst(getBusReg_HomologServPA(refEnvVar.nombreOperacion), 10, ESPACIO);
		SET header.version 				= doRPadCharEst(I_VERSIONSERVICIO, 15, ESPACIO);
		SET header.idTransaccion		= doRPadCharEst(refDataHeaderIn.idTransaccion, 10, ESPACIO);
		SET header.fechaOperacion 		= doRPadCharEst(CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'MM-dd-yyyy'), 10, ESPACIO);
		SET header.pais					= doRPadCharEst(I_PAIS, 2, ESPACIO);
		SET header.lenguaje				= doRPadCharEst(refDataIn.codIdioma, 2, ESPACIO);
		SET header.canal				= doRPadCharEst(refDataHeaderIn.canal, 2, ESPACIO);
		SET header.ipCliente			= doRPadCharEst(refDataIn.valOrigen, 15, ESPACIO);
		SET header.idApp				= doRPadCharEst(refDataIn.valVersionApp, 20, ESPACIO);
		SET header.usuario				= doRPadCharEst(refDataHeaderIn.usuario, 10, ESPACIO);	
		SET header.idSesion			 	= doRPadCharEst(refDataIn.idSesion, 200, ESPACIO);
		
		SET bodyOut.numeroProducto			= doLPadCharEst(refDataIn.valNumeroProducto, 12, ZERO);
		SET bodyOut.tipoProducto			= doRPadCharEst(CAST(getBusReg_HomologTipoProdPA(refDataIn.codTipoProducto, BR_PA_TP) AS CHARACTER), 4, ESPACIO);
		SET bodyOut.master					= doRPadCharEst('', 25, ESPACIO);
		
		-- sorteo de cola en el cual el adaptador me retorna la respuesta correspondiente
		SET refHeaderOut.internalRoutingData.replyToQueue.queueName = UDPreplyToQ;
		
		-- Setear la cola de salida para request
		CALL SetDestinationList(UDPReqQ, VACIO, refLocEnv);
		
		-- Se elimina el arbol del mensaje de entrada almacenado en el environment
		DELETE FIELD refEnvVar.Header;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;

/*
*	Module name: RemoveEnvelope
*	Purpose: Remover el namespace del mensaje de entrada
* 			 para validarlo con el message set
*/
CREATE COMPUTE MODULE RemoveEnvelope
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--Mantener el CorrelId
		CALL CopyMessageHeaders();
				
		--Referencia al mensaje de entrada
		DECLARE refMsgIn				REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn				REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn				REFERENCE TO refMsgIn.Body;
		
		--Referencia al contenedor de la carga útil
        DECLARE refEndpointElem	REFERENCE TO refBodyIn;
		MOVE refEndpointElem FIRSTCHILD NAMESPACE *;
		
		DECLARE refDataHeaderIn 		REFERENCE TO refEndpointElem.Request.DataHeader;
		
		--Referencia a Variables del Environment
		CREATE FIELD Environment.Variables;
		DECLARE refEnvVar				REFERENCE TO Environment.Variables;
		
		--Transportar el Header de la envoltura esbXML		
		SET refEnvVar.Header = refHeaderIn;
				
		--Guardar en Environment para uso en la respuesta
		SET refEnvVar.NameSpace			= FIELDNAMESPACE(refEndpointElem);
		SET refEnvVar.nombreOperacion	= refDataHeaderIn.nombreOperacion;
		SET refEnvVar.total				= refDataHeaderIn.total;
		SET refEnvVar.idTransaccion		= refDataHeaderIn.idTransaccion;
		
		CREATE FIELD OutputRoot.XMLNSC;
		DECLARE refOut 					REFERENCE TO OutputRoot.XMLNSC;
		
		--Indicar propiedad del Message Set
		SET OutputRoot.Properties.MessageSet = NMessageSet;
					
		--Armar mensaje de salida sin namespace
		SET refOut = refBodyIn;		
		CALL RemoveNamespace (refOut, FIELDVALUE(refEnvVar.NameSpace));
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;


/*
*	Module name: ProcessErrorMessageResp
*	Purpose: Construir mensaje de error no esperado cuando 
* 			 se construía la respuesta para el canal o servicio compuesto
*/
CREATE COMPUTE MODULE ProcessErrorMessageResp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Mantener el correlId
		CALL CopyMessageHeaders();
		
		-- Referencia al Header y Body del envolvente
		DECLARE refMsgIn	REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn	REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn	REFERENCE TO refMsgIn.Body;
		
		-- Referencia al OutputLocalEnvironment
		DECLARE refLocEnv	REFERENCE TO OutputLocalEnvironment;
		
		-- Referencia al Environment
		DECLARE refEnvVar	REFERENCE TO Environment.Variables;
		
		-- Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut	REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		-- Crear campo y referencia Header de salida
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut	REFERENCE TO refMsgOut.Header;
		
		-- Declaración de los tres parámetros de entrada para la función de manejo del ExceptionList
		DECLARE nameSpaceResp	CHARACTER FIELDVALUE(refEnvVar.NameSpace);
		DECLARE messageText		CHARACTER VACIO;
		DECLARE parentName		CHARACTER VACIO;
		DECLARE catlgName		CHARACTER VACIO;
		DECLARE messageNumber	INTEGER ZERO_INT;
		
        --Transportar el Header de la envoltura esbXML      
        SET refHeaderOut = refHeaderIn;
        
        --Validacion MessageID
        IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN 
            SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId; 
        ELSE 
            SET refHeaderOut.messageId = refHeaderIn.messageId; 
        END IF;
        
        
        PROPAGATE TO TERMINAL 'out1' MESSAGE OutputRoot DELETE NONE; 
                
        --Llamado a función que construye un SystemException en el esbXML:Header    
        CALL getLastExceptionDetail(InputExceptionList, messageNumber, messageText, parentName, catlgName);     
        
        --Crear campo y referencia Body de salida
        CREATE FIELD refMsgOut.Body;
        DECLARE refBodyOut           REFERENCE TO refMsgOut.Body;
        
        -- Declaración y referencias campos de la carga útil de salida
		CREATE FIELD refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		DECLARE refRespOut	REFERENCE TO refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		
		-- Declarar prefijo de la carga útil
		SET refRespOut.(XMLNSC.NamespaceDecl)xmlns:con = nameSpaceResp;
		
		CREATE FIELD refRespOut.Response;
		DECLARE refRespConOut	REFERENCE TO refRespOut.Response;
		
		-- Llamado a la función que construye el mensaje de salida por Error Datos de Entrada (Error Tecnico)
		CALL TechnicalErrorTransformationDataHeader(refBodyIn, refEnvVar, refRespConOut);

        --Setear la cola de salida
        CALL SetDestinationListHd(refHeaderOut, refLocEnv);
	        
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

/*
 *	Module name: ApplyResponseTransformation
 *	Purpose: Transformar el formato de mensaje de respuesta del 
 *			sistema backend A el formato de mensaje de respuesta para
 *			el canal o servicio.
 */
CREATE COMPUTE MODULE ApplyResponseTransformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		-- Mantener el CorrelId
		CALL CopyMessageHeaders();
		
		--Referencia al Header y Body del mensaje entrante
		DECLARE refMsgIn		    REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn         REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn			REFERENCE TO refMsgIn.Body;
		DECLARE refRespHeaderIn		REFERENCE TO refBodyIn.TCDCT_RESP.Header;
		DECLARE refRespBodyIn		REFERENCE TO refBodyIn.TCDCT_RESP.Body		;

		--Referencia al OutputLocalEnvironment
		DECLARE refLocEnv		    REFERENCE TO OutputLocalEnvironment;
				
		--Referencia al Environment
		DECLARE refEnvVar           REFERENCE TO Environment.Variables;
		
		--Declaración de variables
		DECLARE nameSpaceResp			CHARACTER FIELDVALUE(refEnvVar.NameSpace);
		
		--Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut		REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		--Crear campo y referencia Header de salida.
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut	REFERENCE TO refMsgOut.Header;
		
		--Crear campo y referencia Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut		REFERENCE TO refMsgOut.Body;
		
		 --Garantizar que se envía un messageId
        IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN
            SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId; 
        ELSE 
            SET refHeaderOut.messageId = refHeaderIn.messageId; 
        END IF;

        -- crear response
		CREATE FIELD refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		DECLARE refFirstTagOut		REFERENCE TO refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
        
		--Declarar prefijo de la carga útil
		SET refFirstTagOut.(XMLNSC.NamespaceDecl)xmlns:con = nameSpaceResp;
		
		--Crear campo y referencai al return de salida
		CREATE FIELD refFirstTagOut.Response;	
		DECLARE refReturnOut REFERENCE TO refFirstTagOut.Response;
		
		--Crear campo y referencia al DataHeader de salida
		CREATE FIELD refReturnOut.DataHeader;	
		DECLARE refDataHeaderOut REFERENCE TO refReturnOut.DataHeader;
		
		--Crear campo y referencai al Data de salida
		CREATE FIELD refReturnOut.Data;	
		DECLARE refDataOut REFERENCE TO refReturnOut.Data;
								
		--Transportar el Header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
				
		--Mapeo de la metadata en escenario exitoso
		SET refHeaderOut.responseData.status.statusCode = SUCCESS;
		
		--Mapeos de salida
		
		SET refDataHeaderOut.nombreOperacion      						 = refEnvVar.nombreOperacion;
		SET refDataHeaderOut.total                						 = refEnvVar.total;
		SET refDataHeaderOut.caracterAceptacion    						 = 'B';
		SET refDataHeaderOut.ultimoMensaje         						 = CAST(refRespHeaderIn.flagFinBloque AS INTEGER);
		SET refDataHeaderOut.idTransaccion         						 = refEnvVar.idTransaccion;
		SET refDataHeaderOut.codMsgRespuesta       						 = CAST(refRespHeaderIn.codigoError AS INTEGER);
				
		
		SET refDataOut.Registros.Registro.valNumeroProducto       		 = TRIM(refRespBodyIn.valNumeroProducto);
		SET refDataOut.Registros.Registro.valMonedaOrigenProducto		 = TRIM(refRespBodyIn.valMonedaOrigenProducto);
		SET refDataOut.Registros.Registro.valNombre         	  	     = TRIM(refRespBodyIn.valNombre);
	  	SET refDataOut.Registros.Registro.codProducto      		  		 = CAST(getBusReg_HomologTipoProdPA(refRespBodyIn.codProducto, BR_PA_TPI)AS INTEGER);--'560';
		SET refDataOut.Registros.Registro.codSubProducto       	  		 = CAST(refRespBodyIn.codSubProducto AS CHARACTER);
		SET refDataOut.Registros.Registro.valDesProducto       	  		 = TRIM(refRespBodyIn.valDesProducto);
		

		--Setear la cola de salida
		CALL SetDestinationListHd(refHeaderOut, refLocEnv);
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

/*
 *	Module name: ApplyMessageExceptionTransformation
 *	Purpose: Transformar el formato de mensaje excepción
 *			de respuesta del sistema backend A el formato de 
 *			mensaje de respuesta para el canal o servicio.
 */
CREATE COMPUTE MODULE ApplyMessageExceptionTransformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
	   --Mantener el CorrelId
        CALL CopyMessageHeaders();
        
        --Referencia al Header y Body del envolvente
        DECLARE refMsgIn         REFERENCE TO InputRoot.XMLNSC.*:esbXML;
        DECLARE refHeaderIn      REFERENCE TO refMsgIn.Header;
        DECLARE refBodyIn        REFERENCE TO refMsgIn.Body;
        
        --Referencia al OutputLocalEnvironment
        DECLARE refLocEnv REFERENCE TO OutputLocalEnvironment;
                                                
        --Referencia al Environment
        CREATE FIELD Environment.Variables;
        DECLARE refEnvVar REFERENCE TO Environment.Variables;
        
        --Crear mensaje de salida
        CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
        DECLARE refMsgOut       REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
        
        --Crear campo y referencia Header de salida.
        CREATE FIELD refMsgOut.Header;
        DECLARE refHeaderOut    REFERENCE TO refMsgOut.Header;
        
        --Declaración de los tres parámetros de entrada para la función de manejo del ExceptionList
        DECLARE nameSpaceResp	CHARACTER FIELDVALUE(refEnvVar.NameSpace);
        DECLARE messageText     CHARACTER VACIO;
        DECLARE parentName      CHARACTER VACIO;
        DECLARE catlgName       CHARACTER VACIO;
        DECLARE messageNumber   INTEGER   ZERO_INT;        
        
        --Transportar el Header de la envoltura esbXML      
        SET refHeaderOut = refHeaderIn;
        
        --Validacion MessageID
        IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN 
            SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId; 
        ELSE 
            SET refHeaderOut.messageId = refHeaderIn.messageId; 
        END IF;    
        
        --Crear campo y referencia Body de salida
        CREATE FIELD refMsgOut.Body;
        DECLARE refBodyOut      REFERENCE TO refMsgOut.Body;    
        
        --Declaración y referencias campos de la carga útil de salida
		CREATE FIELD refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		DECLARE refContResponseOut		REFERENCE TO refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		
		--Declarar prefijo de la carga útil
		SET refContResponseOut.(XMLNSC.NamespaceDecl)xmlns:con = nameSpaceResp;
		
		--Crear campo y referencia al Response de salida
		CREATE FIELD refContResponseOut.Response;	
		DECLARE refResponseOut 		REFERENCE TO refContResponseOut.Response;
        	
	    --Llamado a función que construye el mensaje de salida por Error Datos de Entrada (Error Tecnico)
        CALL TechnicalErrorTransformationDataHeaderBranch(refBodyIn, refEnvVar, refResponseOut);
        
        --Setear la cola de salida
		CALL SetDestinationListHd(refHeaderOut, refLocEnv);
        
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;

/*
 *	Module name: ApplyBusinessErrorTransformation
 *	Purpose: Transformar el formato de mensaje error de negocio 
 *			de respuesta del sistema backend al formato de 
 *			mensaje de respuesta para el canal.
 */
CREATE COMPUTE MODULE ApplyBusinessErrorTransformation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Mantener el CorrelId
		CALL CopyMessageHeaders();
		
		--Referencia al Header y Body del envolvente
		DECLARE refMsgIn	 	 REFERENCE TO InputRoot.XMLNSC.*:esbXML;
		DECLARE refHeaderIn 	 REFERENCE TO refMsgIn.Header;
		DECLARE refBodyIn   	 REFERENCE TO refMsgIn.Body;
		DECLARE refRespIn		 REFERENCE TO refBodyIn.TCDCT_RESP;
		DECLARE refRespHeaderIn	 REFERENCE TO refRespIn.Header;
		
		
		--Referencia al Header y Body del mensaje entrante
		DECLARE refMsgRes		REFERENCE TO refMsgIn.Body;

				--Referencia al OutputLocalEnvironment
		DECLARE refLocEnv 	 REFERENCE TO OutputLocalEnvironment;
		
		--Referencia al Environment
		DECLARE refEnvVar 	 REFERENCE TO Environment.Variables;
		
		--Declaración de variables
		DECLARE nameSpaceResp			CHARACTER FIELDVALUE(refEnvVar.NameSpace);
		
		--Crear mensaje de salida
		CREATE FIELD OutputRoot.XMLNSC.esbXML:esbXML;
		DECLARE refMsgOut	 REFERENCE TO OutputRoot.XMLNSC.esbXML:esbXML;
		
		--Crear campo y referencia Header de salida.
		CREATE FIELD refMsgOut.Header;
		DECLARE refHeaderOut REFERENCE TO refMsgOut.Header;		
		
		--Declaración de variables
		DECLARE codigoError		CHARACTER TRIM(refRespHeaderIn.codigoError);
		DECLARE mensajeError	CHARACTER TRIM(refRespHeaderIn.mensajeError);		
		
		--Transportar el Header de la envoltura esbXML
		SET refHeaderOut = refHeaderIn;
		
		--Garantizar que se envía un messageId
		IF refHeaderIn.messageId IS NULL OR FIELDVALUE(refHeaderIn.messageId) = VACIO THEN 
			SET refHeaderOut.messageId = InputRoot.MQMD.CorrelId; 
		END IF;
		
		--Declaración referencia al statusReference de la metadata
		CREATE FIELD refHeaderOut.responseData.status;
		DECLARE statusReference	REFERENCE TO refHeaderOut.responseData.status;		
		
		--Mapeo del error para el HandleError
		SET statusReference.statusCode							= BUSINESS_EXCEPTION; 
		SET statusReference.businessException.businessCode		= codigoError;				
		SET statusReference.businessException.businessMessage	= mensajeError;
		
		--Propagar mensaje al HandleError
		PROPAGATE TO TERMINAL 'out1' MESSAGE OutputRoot DELETE NONE;		
				
		--Crear campo y referencia Body de salida
		CREATE FIELD refMsgOut.Body;
		DECLARE refBodyOut		REFERENCE TO refMsgOut.Body;	

		--Declaración y referencias campos de la carga útil de salida
		CREATE FIELD refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		DECLARE refFirstTagOut REFERENCE TO refBodyOut.{nameSpaceResp}:ConsultaDatosCuentaResponse;
		
		--Declarar prefijo de la carga útil
		SET refFirstTagOut.(XMLNSC.NamespaceDecl)xmlns:con = nameSpaceResp;
		
		--Crear campo y referencai al return de salida
		CREATE FIELD refFirstTagOut.Response.DataHeader;	
		DECLARE refReturnOut REFERENCE TO refFirstTagOut.Response.DataHeader;
		
		--Mapeos de salida
		SET refReturnOut.nombreOperacion			= refEnvVar.nombreOperacion;
		SET refReturnOut.total      				= refEnvVar.total;
		SET refReturnOut.caracterAceptacion  		= 'M';
		SET refReturnOut.ultimoMensaje				= CAST(refRespHeaderIn.flagFinBloque AS INTEGER);
		SET refReturnOut.idTransaccion              = refEnvVar.idTransaccion;
		SET refReturnOut.codMsgRespuesta     		= CAST(refRespHeaderIn.codigoError AS INTEGER);
		SET refReturnOut.msgRespuesta				= CAST(TRIM(refRespHeaderIn.mensajeError) AS CHARACTER);
		
		--Setear la cola de salida
		CALL SetDestinationListHd(refHeaderOut, refLocEnv);
		
		RETURN TRUE;
        
        RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

/*
* Function: Realiza la funci�n RPad de Oracle. Rellena paddingChar a 
*			la der y lo formatea a un l�mite de size caracteres
*	
* Parameters:
* IN: CHARACTER entVar - Dato de entrada a convertir.
* IN: INTEGER size - Tama�o m�nimo y l�mite del dato de retorno
* IN: CHARACTER paddingChar - Car�cter de Relleno
* RETURNS: CHARACTER Devuelve el resultado formateado.
*
 */
 CREATE FUNCTION doRPadCharEst(IN entVar CHARACTER, IN size INTEGER, IN paddingChar CHARACTER) RETURNS CHARACTER
BEGIN
	DECLARE paddingFormat 	CHARACTER REPLICATE(paddingChar, size);
	DECLARE result 			CHARACTER '';
	DECLARE paddingLong 	INTEGER 0;	
	
	IF entVar IS NULL THEN
		SET entVar = '';		
	END IF;
	
	SET paddingLong = LENGTH(entVar);	
	SET paddingLong = size - paddingLong;
	
	IF paddingLong > 0 THEN
		SET result = entVar || SUBSTRING(paddingFormat FROM 1 FOR paddingLong);
	ELSE 
		SET result = LEFT(entVar,size);
	END IF;
	RETURN result;
END;



/*
 	* Function: Realiza la funci�n fillDoLPad de Oracle. Rellena con el
 	*			tercer par�metro especificado a	la izquierda y lo formatea
 	*			 a un l�mite de size caracteres
 	*	
 	* Parameters:
 	* IN: CHARACTER entVar - Dato de entrada a convertir.
 	* IN: INTEGER size - Tama�o m�nimo y l�mite del dato de retorno
 	* IN: CHARACTER - caracter de relleno
 	* RETURNS: CHARACTER Devuelve el resultado formateado.
 	*
 */
CREATE FUNCTION doLPadCharEst(IN entVar CHARACTER, IN size INTEGER, IN fill CHARACTER) RETURNS CHARACTER
BEGIN
	DECLARE paddingFormat 	CHARACTER REPLICATE(fill, size);
	DECLARE result 			CHARACTER '';
	DECLARE paddingLong 	INTEGER 0;
	
	IF entVar IS NULL THEN
		SET entVar = '';
	END IF;	
	
	SET paddingLong = LENGTH(entVar);
	SET paddingLong = size - paddingLong;
	
	IF paddingLong > 0 THEN
		SET result = SUBSTRING(paddingFormat FROM 1 FOR paddingLong) || entVar;	
	ELSE 
		SET result = RIGHT(entVar,size);
	END IF;
	
	RETURN result;
END;
